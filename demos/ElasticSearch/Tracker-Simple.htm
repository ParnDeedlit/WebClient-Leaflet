<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Choropleth Tutorial - Leaflet</title>
  <script include="jquery,geohash,geojson,moment" src="../../libs/zondyclient/include-lib.js"></script>
  <script include="realmove-marker,elasticsearch" src="../../libs/zondyclient/include-leaflet.js"></script>
  <style>
    #mapid {
      height: 600px
    }
      .info {
      padding: 6px 8px;
      font: 14px/16px Arial, Helvetica, sans-serif;
      background: white;
      background: rgba(255, 255, 255, 0.8);
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
      border-radius: 5px;
    }

    .info h4 {
      margin: 0 0 5px;
      color: #777;
    }
  </style>
</head>

<body>
  <div id="mapid"></div>
  <script>
    var mapExtent, mapLevel, startTime, endTime, timeSpeed, flashSpeed, currentTime, geojson;
    startTime = Date.parse(new Date("2018-01-24 08:00:00")); //1516723200000; 毫秒
    endTime = Date.parse(new Date("2018-01-24 08:10:00"));
    runSpeed = 100;//轨迹播放速度 100倍
    var colors = ["blue", "green", "red", "yellow", "black"];
    var map = L.map('mapid').setView([34.25, 108.95], 9);

    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=' +
      'sk.eyJ1IjoiY2hlbmdkYWRhIiwiYSI6ImNqZDFjaGo0ZjFzcnoyeG54enoxdnNuZHUifQ.hTWXXBUQ0wdGeuDF3GWeUw', {
        attribution: '<a href="#">MapBox</a>',
        maxZoom: 18,
        id: 'mapbox.streets',
      }).addTo(map);

    var info = L.control();
    info.onAdd = function(map) {
      this._div = L.DomUtil.create('div', 'info');
      this.update();
      return this._div;
    };
    info.update = function() {
      var startT, endT;
      startT = moment(startTime).format("YYYY-MM-DD HH:mm:ss");
      endT = moment(endTime).format("YYYY-MM-DD HH:mm:ss");
      this._div.innerHTML = '<h4>起始时间</h4>' +
        '<b>' + startT + '</b>' + '<h4>结束时间</h4>' +
        '<b>' + endT + '</b>' +
        '<br>时间跨度:' + 10 + '分钟</br>' +
        '<b>播放加速:' + runSpeed + '倍</b>';
    };
    info.addTo(map);
    //--------------------------------------------------------------------
    //-----------------下面是实际核心代码，以前都是各种样式------------------
    //--------------------------------------------------------------------

    var height = 0,
      width = 0;

    function loadData() {
      $.getJSON("../../data/dataview/tracker-speed.json", function(data) {
        convertData(data);
        updateView();
      });
    };

    function getData(error, response) {
      convertData(response);
      updateView();
    }

    var lineLayers = [];   //记录polyline数组
    var trackLines = {};   //按照设备id进行分组

    function convertData(response) {
      response.hits.hits.forEach(function(iter) {
        var item = iter._source;
        var id = "" + item.imei;   //这里的id表示的是键值key，而不是数组的下表，请特别注意
        if(trackLines[id] == undefined){  //之前没有统计该设备号
          var trackLine = [];
          trackLines[id] =  trackLine; //记录该设备号的轨迹点，用数组表示
        }else{    //之前统计过该设备号
          trackLines[id].push(item);   //对该设备号的数组添加新的记录
        }
      });
    };

    function compare(property) {
      return function(a, b) {
        var value1 = a[property];
        var value2 = b[property];
        return value1 - value2;
      }
    }

    function updateView() {
      if (lineLayers != undefined) {
        lineLayers.forEach(function(layer) {
          layer.remove();
        });
        lineLayers = [];
      }
      var index = 0;
      for(var id in trackLines){
        var line = trackLines[id];
        line.sort(compare('dataTime')); //之前的数据来自不同的节点，时间存在交错，需要重新排序
        var polyline = []; //记录排序后的轨迹线
        var times = [];   //记录轨迹中每个点与临近的下一个点的时间
        var last_time;
        for(var index = 0; index < line.length; index++){
          var point = line[index];
          polyline.push([point.geo.lat, point.geo.lon]);
          if(index == 0){
            last_time = point.dataTime;
          }
          if(index > 0){
            times.push((point.dataTime - last_time) / runSpeed);   //如果不除以runSpeed则是真实时间播放
            last_time = point.dataTime;
          }
        }
        //显示轨迹和移动的点
        var position = index % colors.length;
        var marker2 = L.Marker.movingMarker(polyline, times, {
          autostart: true
        }).addTo(map);
        var track = L.polyline(polyline, {
          color: colors[position]
        }).addTo(map);
        lineLayers.push(track);
        index++;
      }
    }


    loadData();
  </script>
</body>

</html>
