<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>leaflet显示</title>
  <script include="jquery,moment" src="../../libs/zondyclient/include-lib.js"></script>
  <script include="elasticsearch,geojson,turf" src="../../libs/zondyclient/include-leaflet.js"></script>
  <style>
    #mapid {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }

    #info {
      height: 110px;
      width: 200px;
      position: absolute;
      top: 10px;
      right: 10px;
      padding: 6px 8px;
      font: 14px/16px Arial, Helvetica, sans-serif;
      background: white;
      background: rgba(255, 255, 255, 0.8);
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
      border-radius: 5px;
      z-index: 1000;
    }

    #info h4 {
      margin: 0 0 5px;
      color: #777;
      z-index: 1000;
    }
  </style>
</head>

<body>
  <div id="mapid"></div>
  <div id='info'></div>
  <script>
    var map = L.map('mapid').setView([34.25, 108.95], 9);

    var polygons = []; //记录地理围栏的范围,用于查询时传入参数,与上面的paramSpatialOption一致
    var idsList = []; //记录查询的设备id,用于查询是传入参数,与上面的queryField一致

    var trackpoint = { //用于记录的实时状态
      "type": "FeatureCollection",
      "features": []
    };
    var trackLayer;

    var timeformat; //记录当前实际时间
    var flashSpeed = 2000; //2秒一刷新
    var timer; //定时器,执行2秒一次查询操作

    updateTime();
    initMap();

    function updateTime() { //实时更新当前时间
      timeformat = moment().format("YYYY-MM-DD HH:mm:ss");
      var timePane = document.getElementById('info');
      timePane.innerHTML = '<h4>北京时间</h4>' +
        '<b>' + timeformat + '</b>' +
        '<h4>刷新速度:</h4><b>' + flashSpeed / 1000 + '秒</b>' +
        '<h4>中间黄色表示监控围栏,红色点表示离开围栏,蓝色表示进入围栏</h4>';
    }

    function initMap() {
      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=' +
        'sk.eyJ1IjoiY2hlbmdkYWRhIiwiYSI6ImNqZDFjaGo0ZjFzcnoyeG54enoxdnNuZHUifQ.hTWXXBUQ0wdGeuDF3GWeUw', {
          attribution: '<a href="#">MapBox</a>',
          maxZoom: 18,
          id: 'mapbox.streets',
        }).addTo(map);

      initTrackView();
      //请求地理围栏的围栏范围
      $.getJSON('../../data/elasticsearch/geofence.json', function(data) {
        initGeoFencePolygons(data); //初始化请求参数
        initGeoFence(data); //地图显示地理围栏范围
        //初始化请求查询的设备列表
        timer = self.setInterval("initCarIds()", flashSpeed);//启动定时器,每隔若干秒查询一次
      });
    }

    //该函数主要用于网络请求判断是否离开围栏时,传入的围栏的范围
    function initGeoFencePolygons(data) {
      for (var index = 0; index < data.features.length; index++) {
        var polygon = data.features[index];
        polygons.push(polygon);
      }
    }

    //地图显示地理围栏范围,更具不同的属性设置不同的颜色
    function getFenceColor(properties) {
      if (properties.mpPerimeter < 0.3) {
        return "#FFD600";
      } else if (properties.mpPerimeter < 0.4) {
        return "#008080";
      } else if (properties.mpPerimeter < 0.5) {
        return "#708090";
      } else {
        return "#9400D3";
      }
    }

    function initGeoFence(data) {
      L.geoJSON(data, {
        style: function(feature) {
          return {
            color: getFenceColor(feature.properties)
          };
        }
      }).addTo(map);
    }

    //初始化地图中动态设备点的样式,如在围栏内蓝色,不在使用红色等
    function initTrackView() {

    }

      var client = new elasticsearch.Client({
      host: '192.168.94.121:9200'
    });

    function initCarIds() {
      //getRangeIdsUri实际上是拼接url地址,依赖的库是
      client.search({
          index: 'df_real', //数据库名称
          type: 'df_real_type', //数据库-表名称
          body: {
            size: 1000, //此处返回的是hits的数组大小，即设备数对的
            query: {
              bool: {
                filter: {
                  geo_bounding_box: {
                    "geo": {
                      top_left: {
                        lat: 34.8904,
                        lon: 107.6743
                      },
                      bottom_right: {
                        lat: 33.4750,
                        lon: 110.4648
                      }
                    }
                  }
                }
              }
            },
            aggregations: {
              "id": {
                terms: {
                  field: "imei.key"  //这里一定注意key表示的是imei的key名称,
                  //如果属性字段的类型是字符串的话都要传入fieldname.key来让后台明白
                }
              }
            }
          }
        }, updateView);
    }

    function updateView(error, response) {
      trackpoint.features = []; //清空上一次请求的数据
      for(var i = 0; i < response.hits.hits.length; i++){
        var item = response.hits.hits[i]._source;
        var point = turf.point([item.geo.lon, item.geo.lat]);
        var result = turf.booleanPointInPolygon(point, polygons[0]);
        var feautre = {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [item.geo.lon, item.geo.lat]
          },
          "properties": {
            "status": item.status,
            "imei": item.imei,
            "model" : item.model,
            "result": result
          }
        };
        trackpoint.features.push(feautre); //保存这次请求的数据
      }
      //这里是给之前设定的动态更新图层设置新的数据,实现动态播放的效果
      if (trackLayer) trackLayer.remove();
      trackLayer = L.geoJSON(trackpoint, {
          pointToLayer: function(item, latlng) {
            return L.circleMarker(latlng, {
              radius : 5,
              opacity: 0,
              color: "#FF0000",//此处设置颜色无效
              fillColor: getTrackColor(item.properties),
              fillOpacity: 0.8
            });
          }
        })
        .bindPopup(function(layer) {
          return "status = " + layer.feature.properties.status +
            " imei = " + layer.feature.properties.imei;
        })
        .addTo(map);
    }

    function getTrackColor(properties) {
      if (properties.result == false) {
        return "#FF0000";
      } else {
        return "#11b4da";
      }
    }

  </script>
</body>

</html>
