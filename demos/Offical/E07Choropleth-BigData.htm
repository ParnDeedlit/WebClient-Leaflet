<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>Choropleth Tutorial - Leaflet</title>
    <script include="jquery" src="../../libs/zondyclient/include-lib.js"></script>
    <script include="leaflet" src="../../libs/zondyclient/include-leaflet.js"></script>
    <style>
        #mapid{height:600px;width: 100%;}
        .info {
            padding: 6px 8px;
            font: 14px/16px Arial, Helvetica, sans-serif;
            background: white;
            background: rgba(255,255,255,0.8);
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            border-radius: 5px;
        }
        .info h4 {
            margin: 0 0 5px;
            color: #777;
        }
        .legend {
            line-height: 18px;
            color: #555;
        }
        .legend i {
            width: 18px;
            height: 18px;
            float: left;
            margin-right: 8px;
            opacity: 0.7;
        }
    </style>
</head>
<body>
<div id="mapid"></div>
<script>
    var map = L.map('mapid').setView([27.87, 112.95], 6);
    var weburl = "http://192.168.10.184:8811/bigdata/dataview/xian.json";
    weburl = "http://192.168.176.13:6163/igs/rest/mrfs/layer/query?f=geojson&structs=%7B%22IncludeAttribute%22%3Atrue%2C%22IncludeGeometry%22%3Atrue%2C%22IncludeWebGraphic%22%3Afalse%7D&page=0&pageCount=1000&rule=%7B%22CompareRectOnly%22%3Afalse%2C%22EnableDisplayCondition%22%3Afalse%2C%22MustInside%22%3Afalse%2C%22Intersect%22%3Atrue%7D&isAsc=false&cursorType=&fields=&coordPrecision=2&guid=__readonly_user__&gdbp=gdbp%3A%2F%2FMapGisLocal%2F%25E4%25BA%25BA%25E5%258F%25A3GDP%2Fsfcls%2F%25E5%258E%25BF%25E7%25BA%25A7%25E4%25BA%25BA%25E5%258F%25A3GDP2014&_=1520849276510";

    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=' +
        'sk.eyJ1IjoiY2hlbmdkYWRhIiwiYSI6ImNqZDFjaGo0ZjFzcnoyeG54enoxdnNuZHUifQ.hTWXXBUQ0wdGeuDF3GWeUw', {
        attribution: '<a href="#">AMikealson</a>',
        maxZoom: 18,
        id: 'mapbox.streets'
    }).addTo(map);

    function getColor(d) {
        return d > 1000 ? '#800026' :
            d > 500  ? '#BD0026' :
                d > 200  ? '#E31A1C' :
                    d > 100  ? '#FC4E2A' :
                        d > 50   ? '#FD8D3C' :
                            d > 20   ? '#FEB24C' :
                                d > 10   ? '#FED976' :
                                    '#FFEDA0';
    }

    function style(feature) {
        return {
            fillColor: '#FFEDA0',//getColor(feature.properties.KZMJ),
            weight: 2,
            opacity: 1,
            color: 'white',
            dashArray: '1',
            fillOpacity: 0.7
        };
    }

    var bigdata;
    jQuery.ajax({
      async: true,
      url: weburl,
      success: function(data) {
        updateView(data);
      }
    });

    function updateView(data){
        var jsonData = $.parseJSON(data);
        geojson = L.geoJson(jsonData, {
          style: style,
          onEachFeature: onEachFeature
        }).addTo(map);
    }

    function highlightFeature(e) {
        var layer = e.target;

        layer.setStyle({
            weight: 5,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.7
        });

        if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
            layer.bringToFront();
        }
        info.update(layer.feature.properties);
    }

    var geojson;

    function resetHighlight(e) {
        geojson.resetStyle(e.target);
        info.update();
    }

    function zoomToFeature(e) {
        map.fitBounds(e.target.getBounds());
    }

    function onEachFeature(feature, layer) {
        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: zoomToFeature
        });
    }

    var info = L.control();

    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info');
        this.update();
        return this._div;
    };

    info.update = function (props) {
        this._div.innerHTML = '<h4>US Population Density</h4>' +  (props ?
            '<b>' + props.name + '</b><br />' + props.density + ' people / mi<sup>2</sup>'
            : 'Hover over a state');
    };

    info.addTo(map);

    var legend = L.control({position: 'bottomright'});

    legend.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'info legend'),
            grades = [0, 10, 20, 50, 100, 200, 500, 1000],
            labels = [];

        // loop through our density intervals and generate a label with a colored square for each interval
        for (var i = 0; i < grades.length; i++) {
            div.innerHTML +=
                '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
                grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
        }

        return div;
    };

    legend.addTo(map);
</script>
</body>
</html>
