<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script includes="leaflet" src="../../libs/zondyclient/include-leaflet.js"></script>
</head>
<body>
<div id="map" class="map"></div>
<script>
    var result;

    var GeojsonPoint = {
        type : "FeatureCollection",
        crs:{
            type:"name",
            properties:{
                name:"EPSG:3857"
            }
        },
        features : []
    };

    var GeojsonLine = {
        type : "FeatureCollection",
        crs:{
            type:"name",
            properties:{
                name:"EPSG:3857"
            }
        },
        features : []
    };

    var Geojsonarea = {
        type : "FeatureCollection",
        crs:{
            type:"name",
            properties:{
                name:"EPSG:3857"
            }
        },
        features : []
    };

    $.ajax({                             //通过ajax异步获取数据
        url:"turnjson.json",
        type:"GET",
        dataType:"json",
        async:true,
        success:function(data){
            result = data;
            change();
            return;
        },
        error:function(){
            alert("请求失败");
        }
    });

    var vectorSource;

    //对请求到的网络数据进行格式转换
    function change() {                                    //点，调取数据并赋值给变量
        for (var i = 0; i < result.agg.length ; i++) {
            /*var earthRad = 6378137.0;
            var prop = result.agg[i];
            var count1 = prop.count;
            var a = prop.lat * Math.PI / 180;              //经纬度转墨卡托
            var x = earthRad / 2 * Math.log((1.0 + Math.sin(a)) / (1.0 - Math.sin(a)));
            var y = prop.lon * Math.PI / 180 * earthRad;*/
            var feature = {
                type: "Feature",
                geometry: {
                    type: "Point",
                    coordinates: [y, x]
                },
                properties: {
                    count: count1
                },
            }

            GeojsonPoint.features.push(feature);

        }
        dealLine();
        areaol();
        updateOl();
    }

    function dealLine() {
        var lineArray = [];                   //声明一个线集合空数组
        var count = 10000 / 100;              //判断有多少条线
        for(var i = 0; i <= count; i++){
            var line = {
                type: "Feature",
                geometry: {
                    type: "LineString",
                    coordinates: []
                },
            };
            lineArray.push(line);             //lineArray = [line1,line2,.....line100]
        }
        var cur_flag , last_flag;
        for (var i = 0; i < 10000; i++) {
            cur_flag = Math.round(i / 100);                                   //对数据进行分级，每100个点分为一个集合
            last_flag = Math.round((i - 1) / 100);                            //eg:  99
            if(cur_flag != last_flag){
                GeojsonLine.features.push(lineArray[last_flag]);              //把数据提交到Geojson数据格式里
            }else{
                var point = GeojsonPoint.features[i];
                var coo_point = point.geometry.coordinates;
                lineArray[cur_flag].geometry.coordinates.push(coo_point);     //负责取数据（100个点）
            }
        }
    }




    //面
    function areaol(){
        var areaArray = [];
        var count = 10000 / 100;                        //判断有多少个面
        for(var i = 0; i <= count; i++){
            var area = {
                type: "Feature",
                geometry: {
                    type: "Polygon",
                    coordinates: [[]]                   //面是三维数组
                },
                properties: {},
            };
            areaArray.push(area);
        }
        var cur_area,last_area;
        for (var i = 0; i < 10000; i++) {
            cur_area = Math.round(i / 100);
            last_area = Math.round((i - 1) / 100);
            if(cur_area != last_area){
                var point = areaArray[last_area].geometry.coordinates[0][0];  //获得每一级的第一个点的坐标
                areaArray[last_area].geometry.coordinates[0].push(point);     //eg:100
                Geojsonarea.features.push(areaArray[last_area]);
            }else{
                var point = GeojsonPoint.features[i];
                var coo_point = point.geometry.coordinates;
                areaArray[cur_area].geometry.coordinates[0].push(coo_point);
            }

        }
    }




    function updateOl(){
        var vectorSourcePoint = new ol.source.Vector({
            features: (new ol.format.GeoJSON()).readFeatures(GeojsonPoint)
        });

        var vectorLayerPoint = new ol.layer.Vector({
            source: vectorSourcePoint,
            style: styleFunction
        });

        var vectorSourceLine = new ol.source.Vector({
            features: (new ol.format.GeoJSON()).readFeatures(GeojsonLine)
        });

        var vectorLayerLine = new ol.layer.Vector({
            source: vectorSourceLine,
            style: styleFunction
        });

        var vectorSourcearea = new ol.source.Vector({
            features: (new ol.format.GeoJSON()).readFeatures(Geojsonarea)
        });

        var image = new ol.style.Circle({
            radius: 5,
            fill: null,
            stroke: new ol.style.Stroke({color: 'red', width: 1})
        });

        var styles = {
            'Point': new ol.style.Style({
                image: image
            }),
            'LineString': new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'green',
                    width: 5
                })
            }),
            'MultiLineString': new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'green',
                    width: 1
                })
            }),
            'MultiPoint': new ol.style.Style({
                image: image
            }),
            'MultiPolygon': new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'yellow',
                    width: 1
                }),
                fill: new ol.style.Fill({
                    color: 'rgba(255, 255, 0, 0.1)'     //颜色表达
                })
            }),
            'Polygon': new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'red',
                    lineDash: [4],
                    width: 10,
                }),
                fill: new ol.style.Fill({
                    color: 'red'
                })
            }),
            'GeometryCollection': new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'red',
                    width: 2
                }),
                fill: new ol.style.Fill({
                    color: 'red'
                }),
                image: new ol.style.Circle({
                    radius: 10,
                    fill: null,
                    stroke: new ol.style.Stroke({
                        color: 'red'
                    })
                })
            }),
            'Circle': new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'red',
                    width: 2
                }),
                fill: new ol.style.Fill({
                    color: 'red'
                })
            })
        };
        var vectorLayerarea = new ol.layer.Vector({
            source: vectorSourcearea,
            style: styles["Polygon"]
        });

        var styleFunction = function(feature) {
            return styles[feature.getGeometry().getType()];
        };

        var map = new ol.Map({
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                }),
                vectorLayerPoint,
                vectorLayerLine,
                vectorLayerarea
            ],
            target: 'map',
            controls: ol.control.defaults({
                attributionOptions: {
                    collapsible: false
                }
            }),
            view: new ol.View({
                center: [0, 0],
                zoom: 2
            })
        });
    }
</script>
</body>
</html>
